{
  "main": {
    "id": "e84d710ab7dd899b",
    "type": "split",
    "children": [
      {
        "id": "9537af7b187d142d",
        "type": "tabs",
        "children": [
          {
            "id": "74a0ca9621acf60c",
            "type": "leaf",
            "state": {
              "type": "empty",
              "state": {},
              "icon": "lucide-file",
              "title": "New tab"
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "a5443d32a97be374",
    "type": "split",
    "children": [
      {
        "id": "a0e5ee2728ca74c1",
        "type": "tabs",
        "children": [
          {
            "id": "671a6371b662c827",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical",
                "autoReveal": false
              },
              "icon": "lucide-folder-closed",
              "title": "Files"
            }
          },
          {
            "id": "d8c726bf88c4db94",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-search",
              "title": "Search"
            }
          },
          {
            "id": "8fb69313b9056b33",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {},
              "icon": "lucide-bookmark",
              "title": "Bookmarks"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 211.500732421875
  },
  "right": {
    "id": "daa11aecf37119bf",
    "type": "split",
    "children": [
      {
        "id": "f579e95121c6784e",
        "type": "tabs",
        "children": [
          {
            "id": "d759eea2851e68c1",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-coming-in",
              "title": "Backlinks for CollisionCheck"
            }
          },
          {
            "id": "c1e44c529001d7a9",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-going-out",
              "title": "Outgoing links from CollisionCheck"
            }
          },
          {
            "id": "ecf7cfeedc2266dc",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-tags",
              "title": "Tags"
            }
          },
          {
            "id": "8fadb24c9cf035e7",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "followCursor": false,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-list",
              "title": "Outline of CollisionCheck"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "74a0ca9621acf60c",
  "lastOpenFiles": [
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Time-Embedding Module- encodes diffusion timestep $t$ as an embedding vector, injected into each transformer layer via conditioning (e.g., modulation functions).md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Loss Aggregation Module- combines classification cross-entropy loss with diffusion noise prediction loss weighted by $-alpha$.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Classification Head- predicts class distribution $p_{-theta}(y|-boldsymbol{x}_0)$ from the clean or denoised representation.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Noise Predictor Head- outputs $-epsilon_{-theta}(-boldsymbol{x}_t, t)$ to estimate the noise added in diffusion, enabling image reconstruction.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Vision Transformer (ViT) Backbone- processing sequences of image patches with self-attention layers augmented by time embeddings to predict noise and classification logits.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Diffusion Forward Process- adding Gaussian noise progressively to clean images $-boldsymbol{x}_0$ to produce $-boldsymbol{x}_t$.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/algorithm_overview.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera",
    "src/nodes.py.tmp.4393.1753641191849",
    "prompts/generate_math_model.md.tmp.4393.1753641176843",
    "output/adaptive_robot_assisted_feeding/algorithm_overview.md",
    "templates/algorithm_overview.md",
    "output/adaptive_robot_assisted_feeding",
    "src/nodes.py.tmp.4393.1753640447916",
    "src/__pycache__/config.cpython-312.pyc",
    "src/nodes.py.tmp.4393.1753640343598",
    "src/nodes.py.tmp.4393.1753640335011",
    "src/nodes.py.tmp.4393.1753640328850",
    "src/nodes.py.tmp.4393.1753640322200",
    "output/adaptive_robot_assisted_feeding/Cumulative Regret Minimization.md",
    "output/adaptive_robot_assisted_feeding/Exploration Strategy- LinUCB.md",
    "output/adaptive_robot_assisted_feeding/Exploration Strategy- $-epsilon$-greedy.md",
    "output/adaptive_robot_assisted_feeding/Policy $-pi_-theta$ Update.md",
    "output/adaptive_robot_assisted_feeding/Importance-Weighted Linear Regression Oracle.md",
    "output/adaptive_robot_assisted_feeding/Bandit Feedback (Success-Failure $c_t$).md",
    "output/adaptive_robot_assisted_feeding/Action Set $-mathcal{A}$ (Fork pitch and roll angles).md",
    "output/adaptive_robot_assisted_feeding/Context Vector $-phi(x_t)$.md",
    "output/adaptive_robot_assisted_feeding/Context Feature Extraction (SPANet).md",
    "prompts/generate_node_details.md",
    "prompts/generate_pipeline.md",
    "prompts/generate_math_model.md",
    "templates/node_details.md",
    "templates/pipeline.md",
    "templates/math_model.md",
    "improvement_plan.md",
    "output/a_convex_formulation_of_material_points_and_rigid/Weak Coupling Scheme for Rigid and MPM Bodies.md",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/youtube_thumbnail.png",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/example.png",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/banner.png"
  ]
}