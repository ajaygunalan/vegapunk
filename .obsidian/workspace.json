{
  "main": {
    "id": "e84d710ab7dd899b",
    "type": "split",
    "children": [
      {
        "id": "9537af7b187d142d",
        "type": "tabs",
        "children": [
          {
            "id": "74a0ca9621acf60c",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "output/bias_estimation_and_gravity_compensation_for_wrist/algorithm_overview.md",
                "mode": "source",
                "source": false
              },
              "icon": "lucide-file",
              "title": "algorithm_overview"
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "a5443d32a97be374",
    "type": "split",
    "children": [
      {
        "id": "a0e5ee2728ca74c1",
        "type": "tabs",
        "children": [
          {
            "id": "671a6371b662c827",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical",
                "autoReveal": false
              },
              "icon": "lucide-folder-closed",
              "title": "Files"
            }
          },
          {
            "id": "d8c726bf88c4db94",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-search",
              "title": "Search"
            }
          },
          {
            "id": "8fb69313b9056b33",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {},
              "icon": "lucide-bookmark",
              "title": "Bookmarks"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 211.500732421875
  },
  "right": {
    "id": "daa11aecf37119bf",
    "type": "split",
    "children": [
      {
        "id": "f579e95121c6784e",
        "type": "tabs",
        "children": [
          {
            "id": "d759eea2851e68c1",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-coming-in",
              "title": "Backlinks for CollisionCheck"
            }
          },
          {
            "id": "c1e44c529001d7a9",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-going-out",
              "title": "Outgoing links from CollisionCheck"
            }
          },
          {
            "id": "ecf7cfeedc2266dc",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-tags",
              "title": "Tags"
            }
          },
          {
            "id": "8fadb24c9cf035e7",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "output/collisionaffording_point_trees_simdamenable_neares/CollisionCheck.md",
                "followCursor": false,
                "showSearch": false,
                "searchQuery": ""
              },
              "icon": "lucide-list",
              "title": "Outline of CollisionCheck"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 300,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false
    }
  },
  "active": "671a6371b662c827",
  "lastOpenFiles": [
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/algorithm_overview.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera",
    "output/selfadapting_language_models/Reward Function $r$- Evaluates improvement on downstream task after finetuning..md",
    "output/selfadapting_language_models/Outer Loop (Reinforcement Learning)- Updates generation policy $-theta$ based on downstream reward..md",
    "output/selfadapting_language_models/Inner Loop (Supervised Finetuning, SFT)- Updates model weights $-theta -to -theta'$ based on self-edit..md",
    "output/selfadapting_language_models/Self-Edit ($-text{SE}$)- Synthetic data and update directives generated by the model..md",
    "output/selfadapting_language_models/Language Model $LM_-theta$- Generates self-edits conditioned on input context..md",
    "output/selfadapting_language_models/algorithm_overview.md",
    "output/selfadapting_language_models",
    "output/robotic_manipulation_by_imitating_generated_videos/Closed-loop Execution and Recovery (compare tracking during execution, handle deviations).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Motion Retargeting (apply fixed transform $X$ to object pose trajectory).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Grasp Planning and Execution (identify grasp and establish end-effector-to-object transform $X$).md",
    "output/robotic_manipulation_by_imitating_generated_videos/6D Pose Tracker (object pose estimation over video frames).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Active Object Localization (language-guided object mask segmentation).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Monocular Depth Estimator (predicted depth for generated frames).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Vision-Language Model Filtering (video adherence to command).md",
    "output/robotic_manipulation_by_imitating_generated_videos/Video Diffusion Model (scene+command $-to$ video).md",
    "output/robotic_manipulation_by_imitating_generated_videos/algorithm_overview.md",
    "output/robotic_manipulation_by_imitating_generated_videos",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Modified Exploration Strategy (LinUCB with augmented covariance $-Sigma_{-mathbf{p}}$).md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Joint Linear Regression with Hard Constraint.md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Post Hoc Context Observation ($p_t$).md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Bandit Loss Observation ($l_t[a_t]$).md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Action Selection ($a_t$).md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/Visual Context Observation ($c_t$).md",
    "output/leveraging_post_hoc_context_for_faster_learning_in/algorithm_overview.md",
    "output/leveraging_post_hoc_context_for_faster_learning_in",
    "output/adaptive_robot_assisted_feeding/algorithm_overview.md",
    "output/a_convex_formulation_of_material_points_and_rigid/algorithm_overview.md",
    "output/your_vit_is_secretly_a_hybrid_discriminativegenera/Cross-layer adaptive modulation applying $A_t$ into the ViT for temporal conditioning.md",
    "src/config.py.tmp.4393.1753642229642",
    "src/config.py.tmp.4393.1753641884206",
    "output/collisionaffording_point_trees_simdamenable_neares",
    "output/bias_estimation_and_gravity_compensation_for_wrist",
    "output/adaptive_robot_assisted_feeding",
    "src/nodes.py.tmp.4393.1753641191849",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/youtube_thumbnail.png",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/example.png",
    "other_repos_for_inspiration/PocketFlow-Tutorial-Codebase-Knowledge/assets/banner.png"
  ]
}